import java.util.*;
import java.util.Map.*;
import java.util.Iterator;


public class Dijkstra<nodeB, nodeC, nodeE, nodeD, nodeF, nodeA, graph> {

    public static class Graph {

        private Set<Node> nodes = new HashSet<>();

        public void addNode(Node nodeA) {
            nodes.add(nodeA);
        }

        // getters and setters

    }

    public static class Node {

        private String name;

        private List<Node> shortestPath = new LinkedList<>();

        private Integer distance = Integer.MAX_VALUE;

        Map<Node, Integer> adjacentNodes = new HashMap<>();

        public void addDestination(Node destination, int distance) {
            adjacentNodes.put(destination, distance);
        }

        public Node(String n) {
            name = n;
        }

        public String getName(){
            return name;
        }
        public void setDistance(int n){
            distance = n;
        }
        public int getDistance(){
            return distance;
        }
        public void setShortestPath(LinkedList<Node> list){
            shortestPath = list;
        }
        public List<Node> getShortestPath(){
            return shortestPath;
        }
        public Map<Node, Integer> getAdjacentNodes(){
            return adjacentNodes;
        }

    }

    public static List<Node> calculateShortestPathFromSource(Graph graph, Node source, Node destination) {
        source.setDistance(0);
        List<Node> shortestPath = null;
        Set<Node> settledNodes = new HashSet<>();
        Set<Node> unsettledNodes = new HashSet<>();

        unsettledNodes.add(source);

        while (unsettledNodes.size() != 0) {
            Node currentNode = getLowestDistanceNode(unsettledNodes);
            unsettledNodes.remove(currentNode);
            for (Entry <Node, Integer> adjacencyPair:
                    currentNode.getAdjacentNodes().entrySet()) {
                Node adjacentNode = adjacencyPair.getKey();
                Integer edgeWeight = adjacencyPair.getValue();
                if (!settledNodes.contains(adjacentNode)) {
                    CalculateMinimumDistance(adjacentNode, edgeWeight, currentNode);
                    unsettledNodes.add(adjacentNode);
                    shortestPath = currentNode.getShortestPath();
                }
            }


        }

        return shortestPath;

    }

    private static Node getLowestDistanceNode(Set < Node > unsettledNodes) {
        Node lowestDistanceNode = null;
        int lowestDistance = Integer.MAX_VALUE;
        for (Node node: unsettledNodes) {
            int nodeDistance = node.getDistance();
            if (nodeDistance < lowestDistance) {
                lowestDistance = nodeDistance;
                lowestDistanceNode = node;
            }
        }
        return lowestDistanceNode;
    }

    private static void CalculateMinimumDistance(Node evaluationNode,
                                                 Integer edgeWeigh, Node sourceNode) {

        Integer sourceDistance = sourceNode.getDistance();
        if (sourceDistance + edgeWeigh < evaluationNode.getDistance()) {
            evaluationNode.setDistance(sourceDistance + edgeWeigh);
            LinkedList<Node> shortestPath = new LinkedList<>(sourceNode.getShortestPath());
            shortestPath.add(sourceNode);
            evaluationNode.setShortestPath(shortestPath);
        }

    }

    public static void main(String[] args) {

        Node nodeA = new Node("A");
        Node nodeB = new Node("B");
        Node nodeC = new Node("C");
        Node nodeD = new Node("D");
        Node nodeE = new Node("E");
        Node nodeF = new Node("F");

        nodeA.addDestination(nodeB, 1);
        nodeA.addDestination(nodeC, 1);

        nodeB.addDestination(nodeD, 1);
        nodeB.addDestination(nodeF, 1);

        nodeC.addDestination(nodeE, 1);

        nodeD.addDestination(nodeE, 1);
        nodeD.addDestination(nodeF, 1);

        nodeF.addDestination(nodeE, 1);

        Graph graph = new Graph();

        graph.addNode(nodeA);
        graph.addNode(nodeB);
        graph.addNode(nodeC);
        graph.addNode(nodeD);
        graph.addNode(nodeE);
        graph.addNode(nodeF);

        List<Node> l = Dijkstra.calculateShortestPathFromSource(graph, nodeE, nodeF);
        if (l == null) {
            System.out.println("Couldn't find path between " + nodeE.getName() + " and " + nodeF.getName());
        } else {
            for (int i = 1; i < l.size(); i++) {
                System.out.println(l.get(i).getName());
            }


        }
    }
}
